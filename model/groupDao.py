import dataclasses
from dataclasses import dataclass
from typing import Optional

from utils.mongo_store_broker import mongo
from bson.objectid import ObjectId
import model.userDao


@dataclass  # Autogenerated __init__, __eq___ and __repr__ from given fields
class Group:
    users: list[ObjectId]
    type: str
    _id: Optional[ObjectId] = dataclasses.field(default_factory=ObjectId)

    @property
    def id(self):
        return self._id

    @property
    def is_chat(self):
        return self.type == 'chat'

    @property
    def is_community(self):
        return self.type == 'community'

    @property
    def users_built(self):
        return [model.userDao.find_one(u_id) for u_id in self.users]

    def __iter__(self):  # This method allows us to add support for dict() on an object
        for field in dataclasses.fields(self):
            yield field.name, getattr(self, field.name)


def find_one(_id: str | ObjectId):
    """
    Returns a group object from db
    :param _id:
    :return:
    """
    if isinstance(_id, str):
        _id = ObjectId(_id)
    res = mongo.db.groups.find_one({"_id": _id})
    if res:
        return Group(**res)


def find_all_chats_by_user(_id: str | ObjectId):
    if isinstance(_id, str):
        _id = ObjectId(_id)

    res = mongo.db.groups.find({"users": _id, "type": "chat"})
    return [Group(**r) for r in res]


def find_all_communities_by_user(_id: str | ObjectId):
    if isinstance(_id, str):
        _id = ObjectId(_id)

    res = mongo.db.groups.find({"users": _id, "type": "community"})
    return [Group(**r) for r in res]


def insert_one(obj: dict | Group):
    """
    Inserts one group object into the db
    :param obj:
    :return:
    """
    return mongo.db.groups.insert_one(dict(obj)).inserted_id


def update_one(_id: str | ObjectId, obj: Group):
    """
    Updates a group object inside the db
    :param _id:
    :param obj:
    :return:
    """
    if isinstance(_id, str):
        _id = ObjectId(_id)
    return mongo.db.groups.update_one({"_id": _id},
                                      {"$set": dict(obj)})


def delete_one(_id: str | ObjectId):
    """
    Deletes a group object inside the db
    :param _id:
    :return:
    """
    if isinstance(_id, str):
        _id = ObjectId(_id)
    return mongo.db.groups.delete_one({"_id": _id})


def get_all():
    """
    :return: - A list of group objects
    """
    res = mongo.db.groups.find({})
    return [Group(**r) for r in res]
