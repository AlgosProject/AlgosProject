import dataclasses
from dataclasses import dataclass
from typing import Optional

import model.userDao
from utils.mongo_store_broker import mongo
from bson.objectid import ObjectId


@dataclass  # Autogenerated __init__, __eq___ and __repr__ from given fields
class Tag:
    name: str
    post_ids: list[ObjectId]
    _id: Optional[ObjectId] = dataclasses.field(default_factory=ObjectId)

    @property
    def id(self):
        return self._id

    def __iter__(self):  # This method allows us to add support for dict() on an object
        for field in dataclasses.fields(self):
            yield field.name, getattr(self, field.name)

    @property
    def get_number_of_followers(self):
        return len(model.userDao.find__positive_affinity_user_by_tag_id(self.id))


def find_one(_id: str | ObjectId):
    """
    Returns a tag object from db
    :param _id:
    :return:
    """
    if isinstance(_id, str):
        _id = ObjectId(_id)
    res = mongo.db.tags.find_one({"_id": _id})
    if res:
        return Tag(**res)

def find_by_name(name: str):
    """
        Returns a tag object from db
        :param name:
        :return:
    """
    res = mongo.db.tags.find_one({"name": name})
    if res:
        return Tag(**res)
    else:
        return None


def insert_one(obj: dict | Tag):
    """
    Inserts one tag object into the db
    :param obj:
    :return:
    """
    return mongo.db.tags.insert_one(dict(obj)).inserted_id


def update_one(_id: str | ObjectId, obj: Tag):
    """
    Updates a tag object inside the db
    :param _id:
    :param obj:
    :return:
    """
    if isinstance(_id, str):
        _id = ObjectId(_id)
    return mongo.db.tags.update_one({"_id": _id},
                                    {"$set": dict(obj)})


def delete_one(_id: str | ObjectId):
    """
    Deletes a tag object inside the db
    :param _id:
    :return:
    """
    if isinstance(_id, str):
        _id = ObjectId(_id)
    return mongo.db.tags.delete_one({"_id": _id})


def get_all():
    """
    :return: - A list of tag objects
    """
    res = mongo.db.tags.find({})
    return [Tag(**r) for r in res]
